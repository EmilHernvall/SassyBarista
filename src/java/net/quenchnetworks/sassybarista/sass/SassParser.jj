options {
    STATIC = false ;
    UNICODE_INPUT = true ;
}

PARSER_BEGIN(SassParser)
package net.quenchnetworks.sassybarista.sass;

import java.util.*;

import net.quenchnetworks.sassybarista.sass.eval.*;
import net.quenchnetworks.sassybarista.sass.value.*;
import net.quenchnetworks.sassybarista.sass.models.*;
import net.quenchnetworks.sassybarista.sass.expression.*;

public class SassParser {
    public static void main( String[] args )
    throws EvaluationException, ParseException, TokenMgrError {
        SassParser parser = new SassParser(System.in);
        SassSheet result = parser.parse();
        
        SassSheetSerializer serializer = new SassSheetSerializer(System.out);
        serializer.render(result);
    }
}
PARSER_END(SassParser)

/*TOKEN_MGR_DECLS : {
    int commentNestingDepth ; 
} */

SKIP :
{
  "/*" : WithinComment
}
<WithinComment> SKIP :
{
  "*/" : DEFAULT
}
<WithinComment> MORE :
{
  <~[]>
}

//SKIP : { " " }
//SKIP : { "\t" | "\n" | "\r" | "\r\n" }
//SKIP : {  "/*" { commentNestingDepth = 1 ; } : COMMENT } 

TOKEN : { < #ident : ("-")? <nmstart> (<nmchar>)* > }
TOKEN : { < #name : (<nmchar>)+ > }
TOKEN : { < #nmstart : ["a"-"z","A"-"Z"] | "_" | <nonascii> | <escape> > }
TOKEN : { < #nonascii : ["\u0080"-"\uD7FF","\uE000"-"\uFFFD"] > }
TOKEN : { < #unicode : "\\" (["a"-"f","A"-"F","0"-"9"]){1,6} (<wc>)? > }
TOKEN : { < #escape : <unicode> | "\\" ["\u0020"-"\u007E","\u0080"-"\uD7FF","\uE000"-"\uFFFD"] > }
TOKEN : { < #nmchar : ["a"-"z","A"-"Z","0"-"9"] | "-" | "_" | <nonascii> | <escape> > }
TOKEN : { < #num : (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+ > }
TOKEN : { < #string : "\"" (<stringchar> | "'")* "\"" | "'" (<stringchar> | "\"")* "'" > }
TOKEN : { < #stringchar : <urlchar> | "\u0020" | "\\" <nl> > }
TOKEN : { < #urlchar : ["\u0009","\u0021","\u0023"-"\u0026","\u0027"-"\u007E"] | <nonascii> | <escape> > }
TOKEN : { < #nl : "\n" | "\r" "\n" | "\r" | "\u000C" > }
TOKEN : { < #wc: "\u0009" | "\n" | "\u000C" | "\r" | "\u0020" > }
TOKEN : { < #w : (<wc>)* > }

TOKEN : { < IDENT : <ident> > }
//TOKEN : { < ATKEYWORD : "@" <ident> > }
TOKEN : { < STRING : <string> > }
TOKEN : { < HASH : "#" <name> > }
TOKEN : { < NUMBER : <num> > }
TOKEN : { < PERCENTAGE : <num> "%" > }
TOKEN : { < DIMENSION : <num> <ident> > }
TOKEN : { < URI : "url(" <w> (<string> | (<urlchar>)* ) <w> ")" > }
TOKEN : { < S : (<wc>)+ > }
TOKEN : { < FUNCTION : <ident> "(" > }
TOKEN : { < INCLUDES : "~=" > }
TOKEN : { < DASHMATCH : "|=" > }
TOKEN : { < PREFIXMATCH : "^=" > }
TOKEN : { < SUFFIXMATCH : "$=" > }
TOKEN : { < SUBSTRINGMATCH : "*=" > }

TOKEN : { < VARIABLE : "$" <name> > }

//MORE : { < DELIMETER : <delim> > }

SassSheet parse() :
{
    Token t ;
    List<Rule> rules ;
    Rule rule ;
    Mixin mixin ;
    Map<String, INode> variables ;
    Map<String, Mixin> mixins ;
    String variableName ;
    INode variableValue ;
}
{
    { 
        rules = new ArrayList<Rule>(); 
        variables = new HashMap<String, INode>();
        mixins = new HashMap<String, Mixin>();
    }
    (
        (
            t = <VARIABLE>
            { variableName = t.image; }
            ":"
            (<S>)*
            variableValue = ConditionalExpression()
            ";"
            (LOOKAHEAD(2) <S>)*
            { variables.put(variableName, variableValue); }
        )
        |
        (
            "@mixin"
            (<S>)+
            mixin = Mixin()
            { mixins.put(mixin.getName(), mixin); }
        )
        |
        (
            rule = Rule()
            { rules.add(rule); }
        )
    )+
    { 
        return new SassSheet(variables, mixins, rules); 
    }
}

Rule Rule() :
{
    Token t ;
    Rule rule;
    SelectorChain selectorChain ;
}
{
    (<S>)*
    { rule = new Rule(); }
    (
        selectorChain = SelectorChain()
        { rule.addSelectorChain(selectorChain); }
    )+
    RuleBlock(rule)
    
    { return rule; }
}

Mixin Mixin() :
{
    Token t ;
    Mixin mixin;
}
{
    { mixin = new Mixin(); }
    
    (
        (
            t = <IDENT>
            { mixin.setName(t.image); }
            (<S>)*
        )
        |
        (
            t = <FUNCTION>
            { mixin.setName(t.image.substring(0, t.image.length()-1)); }
            (<S>)*
                t = <VARIABLE>
                { mixin.addParameter(t.image); }
                (<S>)*
                (
                    ","
                    (<S>)*
                    t = <VARIABLE>
                    { mixin.addParameter(t.image); }
                    (<S>)*
                )*
            ")"
            (<S>)*
        )
    )

    MixinBlock(mixin)
    
    { return mixin; }
}

void RuleBlock(Rule block) :
{
    Token t ;
    Rule nestedRule;
    Property property ;
    IncludeDirective i ;
    IPropertyValue value ;
    Selector sel ;
}
{
    "{"
    (LOOKAHEAD(2) <S>)*
    (
        LOOKAHEAD(Rule())
        (
            nestedRule = Rule()
            { block.addSubRule(nestedRule); }
        )
        |
        LOOKAHEAD( <IDENT> ":" )
        (
            property = Property(block)
            { block.addProperty(property); }
        )
        |
        (
            "@include"
            (<S>)+
            (
                (
                    t = <IDENT>
                    { i = new IncludeDirective(t.image); }
                )
                |
                (
                    t = <FUNCTION>
                    { i = new IncludeDirective(t.image.substring(0, t.image.length()-1)); }
                    value = PropertyValue()
                    { i.addParameter(value); }
                    (<S>)*
                    (
                        ","
                        (<S>)*
                        value = PropertyValue()
                        { i.addParameter(value); }
                        (<S>)*
                    )*
                    ")"
                )
            )
            ";"
            (LOOKAHEAD(2) <S>)*
            
            { block.addInclude(i); }
        )
        |
        (
            "@import"
            (<S>)+
            t = <STRING>
            (<S>)*
            ";"
            (LOOKAHEAD(2) <S>)*
            
            { block.addImport(t.image.substring(1, t.image.length()-1)); }
        )
        |
        (
            "@extend"
            (<S>)+
            sel = Selector()
            (<S>)*
            ";"
            (LOOKAHEAD(2) <S>)*
            
            { block.addExtend(sel); }
        )
    )*
    "}"
    (LOOKAHEAD(2) <S>)*
}

void MixinBlock(Mixin block) :
{
    Token t ;
    Rule nestedRule;
    Property property ;
}
{
    "{"
    (LOOKAHEAD(2) <S>)*
    (
        LOOKAHEAD(Rule())
        (
            nestedRule = Rule()
            { block.addSubRule(nestedRule); }
        )
        |
        LOOKAHEAD( <IDENT> ":" )
        (
            property = Property(block)
            { block.addProperty(property); }
        )
    )*
    "}"
    (LOOKAHEAD(2) <S>)*
}

SelectorChain SelectorChain() :
{
    Token t ;
    Selector s ;
    SelectorChain selectorChain ;
}
{
    { selectorChain = new SelectorChain(); }
    (
        LOOKAHEAD(1)
        s = Selector()
        { selectorChain.addSelector(s); }
    )+
    (",")?
    (<S>)*
    
    { return selectorChain; }
}

Selector Selector() :
{
    Token t ;
    Selector s ;
    Selector.AttributeSelector attr ;
}
{
    { s = new Selector(); }
    
    // Combinator
    [
        (
            ">"
            { s.setCombinator(Selector.Combinator.CHILD_OF); }
            |
            "+"
            { s.setCombinator(Selector.Combinator.DIRECTLY_PRECEDED_BY); }
            |
            "~"
            { s.setCombinator(Selector.Combinator.PRECEDED_BY); }
        )
        (<S>)+
    ]
    
    (
        LOOKAHEAD(2)
        (
            // ID
            t = <HASH>
            { 
                if (s.getClassNames().size() > 0) {
                    throw new ParseException("Encountered id selector after class selector.");
                }
                s.setId(t.image.substring(1)); 
            }
        |
            // Class
            "."
            t = <IDENT>
            { s.addClassName(t.image); }
        |
            // Element
            t = <IDENT>
            { s.setElement(t.image); }
        )
    )+
    
    // Pseudo class
    [
        ":"
        t = <IDENT>
        { s.setPseudoClass(t.image); }
        (
            "("
            t = <IDENT>
            { s.setPseudoClassParameter(t.image); }
            ")"
        )*
    ]
    
    // Attribute selector
    [
        { attr = new Selector.AttributeSelector(); }
        "["
        t = <IDENT>
        { attr.setAttribute(t.image); }
        (
            (
                "="
                { attr.setType(Selector.AttributeSelectorType.EQUAL); }
                |
                <INCLUDES>
                { attr.setType(Selector.AttributeSelectorType.INCLUDES); }
                |
                <PREFIXMATCH>
                { attr.setType(Selector.AttributeSelectorType.PREFIXMATCH); }
                |
                <SUFFIXMATCH>
                { attr.setType(Selector.AttributeSelectorType.SUFFIXMATCH); }
                |
                <SUBSTRINGMATCH>
                { attr.setType(Selector.AttributeSelectorType.SUBSTRINGMATCH); }
                |
                <DASHMATCH>
                { attr.setType(Selector.AttributeSelectorType.DASHMATCH); }
            )
            t = <STRING>
            { attr.setValue(t.image.substring(1,t.image.length()-1)); }
        )*
        "]"
        { s.setAttributeSelector(attr); }
    ]
    
    (LOOKAHEAD(1) <S>)*
    
    { return s; }
}

Property Property(Block block) :
{
    Token t ;
    Property property ;
    StringBuilder buffer ;
    INode value ;
}
{
    t = <IDENT>
    { property = new Property(t.image); }
    ":"
    (<S>)*
    (
        LOOKAHEAD( (<IDENT> | <STRING>) (<S>)* "," )
        (
            { buffer = new StringBuilder(); }
            (
                LOOKAHEAD( (<IDENT> | <STRING>) (<S>)* "," )
                (
                    t = <IDENT>
                    |
                    t = <STRING>
                )
                (<S>)*
                ","
                (<S>)*
                { 
                    buffer.append(t.image);
                    buffer.append(", ");
                }
            )+
            (
                t = <IDENT>
                |
                t = <STRING>
            )
            (<S>)*
            
            { 
                buffer.append(t.image);
                property.addValue(new DefaultPropertyValue(buffer.toString())); 
            }
        )
        |
        (
            value = Expression()
            { property.addValue(value); }
            (<S>)*
        )
    )+
    ";"
    (LOOKAHEAD(2) <S>)*
    
    { return property; }
}

INode ConditionalExpression() :
{
    INode node, current ;
    IBinaryNode nextNode ;
}
{
    node = Expression()
    (<S>)*
    (
        (
            { 
                nextNode = new EqNode(); 
                nextNode.setLeftNode(node);
            }
            "=="
        |
            { 
                nextNode = new NotEqNode(); 
                nextNode.setLeftNode(node);
            }
            "!="
        |
            { 
                nextNode = new LtNode(); 
                nextNode.setLeftNode(node);
            }
            "<"
        |
            { 
                nextNode = new GtNode(); 
                nextNode.setLeftNode(node);
            }
            ">"
        )
        (<S>)*
        current = Expression()
        { 
            nextNode.setRightNode(current); 
            node = nextNode;
        }
        (<S>)*
    )*
    
    { return node; }
}

INode Expression() :
{
    INode node, current ;
    IBinaryNode nextNode ;
}
{
    node = Term()
    (<S>)*
    (
        (
            { 
                nextNode = new AdditionNode(); 
                nextNode.setLeftNode(node);
            }
            "+"
        |
            { 
                nextNode = new SubtractionNode(); 
                nextNode.setLeftNode(node);
            }
            "-"
        )
        (<S>)*
        current = Term()
        { 
            nextNode.setRightNode(current); 
            node = nextNode;
        }
        (<S>)*
    )*
    
    { return node; }
}

INode Term() :
{
    INode node, current ;
    IBinaryNode nextNode ;
}
{
    node = Primary()
    (<S>)*
    (
        (
            { 
                nextNode = new MultiplicationNode(); 
                nextNode.setLeftNode(node);
            }
            "*"
        |
            { 
                nextNode = new DivisionNode(); 
                nextNode.setLeftNode(node);
            }
            "/"
        )
        (<S>)*
        current = Primary()
        { 
            nextNode.setRightNode(current); 
            node = nextNode;
        }
        (<S>)*
    )*
    
    { return node; }
}

INode Primary() :
{
    INode node;
}
{
    (
        node = PropertyValue()
    |
        "-"
        node = Expression()
        { node = new NegationNode(node); }
    |
        "("
        node = Expression()
        ")"
    )

    { 
        return node; 
    }
}

IPropertyValue PropertyValue() :
{
    Token t ;
    IPropertyValue p ;
    IPropertyValue tmp ;
    FunctionPropertyValue fp ;
}
{
    (
            t = <IDENT> 
            { p = new DefaultPropertyValue(t.image); } 
        |
            t = <NUMBER> 
            { p = new NumberPropertyValue(t.image); } 
        |
            t = <PERCENTAGE> 
            { p = new PercentagePropertyValue(t.image); } 
        |
            t = <DIMENSION> 
            { p = new DimensionPropertyValue(t.image); } 
        |
            t = <STRING> 
            { p = new StringPropertyValue(t.image); } 
        |
            t = <URI> 
            { p = new URIPropertyValue(t.image); } 
        |
            t = <HASH> 
            { p = new ColorPropertyValue(t.image); } 
        |
            t = <VARIABLE>
            { p = new VariablePropertyValue(t.image); }
        |
            t = <FUNCTION> 
            { fp = new FunctionPropertyValue(t.image.substring(0,t.image.length()-1)); } 
            (<S>)* 
            (
                tmp = PropertyValue() 
                { fp.addValue(tmp); }
                (<S>)*
            )* 
            ")"
            { p = fp; }
    )
    
    { return p; }
}
