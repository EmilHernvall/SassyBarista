options {
	STATIC = false ;
}

PARSER_BEGIN(SassParser)
package net.quenchnetworks.sassybarista;

import java.util.*;

class SassParser {
	public static void main( String[] args )
	throws ParseException, TokenMgrError {
		SassParser parser = new SassParser( System.in ) ;
		List<Rule> rules = parser.Start();
		
		for (Rule rule : rules) {
			for (Selector selector : rule.getSelectors()) {
				System.out.println(selector.toString());
			}
			
			for (Property property : rule.getProperties()) {
				System.out.print("\t" + property.getKey() + ": ");
				for (String value : property.getValues()) {
					System.out.print(value + " ");
				}
				System.out.println();				
			}
		}
	}
}
PARSER_END(SassParser)

/*TOKEN_MGR_DECLS : {
    int commentNestingDepth ; 
} */

SKIP :
{
  "/*" : WithinComment
}
<WithinComment> SKIP :
{
  "*/" : DEFAULT
}
<WithinComment> MORE :
{
  <~[]>
}

SKIP : { " " }
SKIP : { "\t" | "\n" | "\r" | "\r\n" }
//SKIP : {  "/*" { commentNestingDepth = 1 ; } : COMMENT } 

TOKEN : { < #ident : ("-")? <nmstart> (<nmchar>)* > }
TOKEN : { < #name : (<nmchar>)+ > }
TOKEN : { < #nmstart : ["a"-"z","A"-"Z"] | "_" | <nonascii> | <escape> > }
TOKEN : { < #nonascii : ["\u0080"-"\uD7FF","\uE000"-"\uFFFD"] > }
TOKEN : { < #unicode : "\\" (["a"-"f","A"-"F","0"-"9"]){1,6} (<wc>)? > }
TOKEN : { < #escape : <unicode> | "\\" ["\u0020"-"\u007E","\u0080"-"\uD7FF","\uE000"-"\uFFFD"] > }
TOKEN : { < #nmchar : ["a"-"z","A"-"Z","0"-"9"] | "-" | "_" | <nonascii> | <escape> > }
TOKEN : { < #num : (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+ > }
TOKEN : { < #string : "\"" (<stringchar> | "'")* "\"" | "'" (<stringchar> | "\"")* "'" > }
TOKEN : { < #stringchar : <urlchar> | "\u0020" | "\\" <nl> > }
TOKEN : { < #urlchar : ["\u0009","\u0021","\u0023"-"\u0026","\u0027"-"\u007E"] | <nonascii> | <escape> > }
TOKEN : { < #nl : "\n" | "\r" "\n" | "\r" | "\u000C" > }
TOKEN : { < #wc: "\u0009" | "\n" | "\u000C" | "\r" | "\u0020" > }
TOKEN : { < #w : (<wc>)* > }
TOKEN : { < #delim : "." > }

TOKEN : { < BEGIN_SCOPE : "{" > }
TOKEN : { < END_SCOPE : "}" > }
TOKEN : { < COLON : ":" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < COMMA : "," > }

TOKEN : { < IDENT : <ident> > }
TOKEN : { < STRING : <string> > }
TOKEN : { < HASH : "#" <name> > }
TOKEN : { < NUMBER : <num> > }
TOKEN : { < PERCENTAGE : <num> "%" > }
TOKEN : { < DIMENSION : <num> <ident> > }
MORE : { < DELIMETER : <delim> > }
TOKEN : { < URI : "url(" <w> (<string> | (<urlchar>)* ) <w> ")" > }

//TOKEN : { < SELECTOR : (<ident>)* ("#" | ".") <ident> > }

List<Rule> Start() :
{
	Token t ;
	List<Rule> rules ;
	Rule rule ;
	Selector selector ;
	Property property ;
}
{
	{ rules = new ArrayList<Rule>(); }
	(
		{ rule = new Rule(); }
		(
			selector = Selector()
			{ rule.addSelector(selector); }
		)+
		<BEGIN_SCOPE>
			(
				property = Property()
				{ rule.addProperty(property); }
			)*
		<END_SCOPE>
		{ rules.add(rule); }
	)*
	{ return rules; }
}

Selector Selector() :
{
	Token t ;
	String result ;
	Selector selector ;
}
{
	{ selector = new Selector(); }
	(
		result = Any()
		{ selector.addSelectorRule(result); }
	)+
	(<COMMA>)*
	
	{ return selector; }
}

Property Property() :
{
	Token t ;
	String result ;
	Property property ;
}
{
	t = <IDENT>
	{ property = new Property(t.image); }
	<COLON>
	(
		result = Any()
		{ property.addValue(result); }
		(<COMMA>)*
	)+
	<SEMICOLON>
	
	{ return property; }
}

String Any() :
{
	Token t ;
}
{
	(
		t = <IDENT> |
		t = <HASH> |
		t = <NUMBER> |
		t = <PERCENTAGE> |
		t = <DIMENSION> |
		t = <STRING> |
		t = <COLON> | 
		t = <URI>
	)
	
	{ return t.image; }
}
